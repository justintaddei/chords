import { Mode } from './store'

type ChordAction = string | { cmd: string; args: unknown[] }

export type Chord = ChordAction | ChordAction[]

export type ChordMap = Record<string, Chord>

const normal = {
  '.': 'chords.repeatLastChord',
  q: 'chords.toggleRecording',
  '@q': 'chords.replay',
  i: 'chords.setInsertMode',
  '<space>': 'chords.setLeaderMode',
  a: ['cursorRight', 'chords.setInsertMode'],
  I: ['cursorHome', 'chords.setInsertMode'],
  A: ['cursorEnd', 'chords.setInsertMode'],
  o: ['editor.action.insertLineAfter', 'chords.setInsertMode'],
  O: ['editor.action.insertLineBefore', 'chords.setInsertMode'],
  v: 'chords.setVisualMode',
  // movement
  h: 'chords.cursorLeft',
  j: 'chords.cursorDown',
  k: 'chords.cursorUp',
  l: 'chords.cursorRight',
  H: 'cursorHome',
  J: 'chords.paragraphDown',
  K: 'chords.paragraphUp',
  L: 'cursorEnd',
  gg: 'cursorTop',
  G: 'cursorBottom',
  '^': 'cursorHome',
  $: 'cursorEnd',
  w: 'chords.cursorToWordStartRight',
  W: 'chords.cursorToStringStartRight',
  e: 'chords.cursorToWordEndRight',
  E: 'chords.cursorToStringEndRight',
  b: 'chords.cursorToWordStartLeft',
  ge: 'chords.cursorToWordEndLeft',
  '%': 'editor.action.jumpToBracket',
  f: 'chords.cursorToCharRight',
  F: 'chords.cursorToCharLeft',
  '/': 'chords.cursorToMatchRight',
  '\\': 'chords.cursorToMatchLeft',
  '>': 'editor.action.insertCursorBelow',
  '<': 'editor.action.insertCursorAbove',
  m: ['editor.action.addSelectionToNextFindMatch', 'chords.setVisualMode'],
  M: ['editor.action.addSelectionToPreviousFindMatch', 'chords.setVisualMode'],
  // modifiers
  '=': 'editor.emmet.action.incrementNumberByOne',
  '-': 'editor.emmet.action.decrementNumberByOne',
  r: 'chords.replaceCharUnderCursor',
  // registers
  u: ['undo', 'chords.restoreCursors'],
  U: 'redo',
  p: 'editor.action.clipboardPasteAction',
  // registers -> copy
  ye: [
    'chords.saveSelections',
    'chords.setVisualMode',
    'chords.cursorToWordEndRightSelect',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.setNormalMode',
    'chords.restoreSelections',
  ],
  yb: [
    'chords.saveSelections',
    'chords.cursorToWordStartLeftSelect',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  yw: [
    'chords.saveSelections',
    'chords.cursorToWordStartRightSelect',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  yL: [
    'chords.saveSelections',
    'cursorEndSelect',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  y$: [
    'chords.saveSelections',
    'cursorEndSelect',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  yH: [
    'chords.saveSelections',
    'cursorHomeSelect',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'y^': [
    'chords.saveSelections',
    'cursorHomeSelect',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  ys: [
    'chords.saveSelections',
    'chords.selectSymbolAtCursor',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  yy: [
    'chords.saveSelections',
    'cursorHome',
    'cursorEndSelect',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  yf: [
    'chords.saveSelections',
    'chords.cursorToCharRightSelect',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  yF: [
    'chords.saveSelections',
    'chords.cursorToCharLeftSelect',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'y/': [
    'chords.saveSelections',
    'chords.cursorToMatchRightSelect',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'y\\': [
    'chords.saveSelections',
    'chords.cursorToMatchLeftSelect',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  yaw: [
    'chords.saveSelections',
    'chords.selectAroundWord',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  yab: [
    'chords.saveSelections',
    'editor.action.selectToBracket',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'ya"': [
    'chords.saveSelections',
    { cmd: 'chords.selectAroundRight', args: ['"', '"'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  "ya'": [
    'chords.saveSelections',
    { cmd: 'chords.selectAroundRight', args: ["'", "'"] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'ya`': [
    'chords.saveSelections',
    { cmd: 'chords.selectAroundRight', args: ['`', '`'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'ya(': [
    'chords.saveSelections',
    { cmd: 'chords.selectAroundLeft', args: ['(', ')'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'ya{': [
    'chords.saveSelections',
    { cmd: 'chords.selectAroundLeft', args: ['{', '}'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'ya[': [
    'chords.saveSelections',
    { cmd: 'chords.selectAroundLeft', args: ['[', ']'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'ya<': [
    'chords.saveSelections',
    { cmd: 'chords.selectAroundLeft', args: ['<', '>'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'ya)': [
    'chords.saveSelections',
    { cmd: 'chords.selectAroundRight', args: ['(', ')'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'ya}': [
    'chords.saveSelections',
    { cmd: 'chords.selectAroundRight', args: ['{', '}'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'ya]': [
    'chords.saveSelections',
    { cmd: 'chords.selectAroundRight', args: ['[', ']'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'ya>': [
    'chords.saveSelections',
    { cmd: 'chords.selectAroundRight', args: ['<', '>'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  yat: [
    'chords.saveSelections',
    'chords.selectAroundXMLTag',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  yiw: [
    'chords.saveSelections',
    'chords.selectInsideWord',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  yib: [
    'chords.saveSelections',
    'editor.action.selectToBracket',
    'chords.shrinkSelections',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'yi"': [
    'chords.saveSelections',
    { cmd: 'chords.selectInsideRight', args: ['"', '"'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  "yi'": [
    'chords.saveSelections',
    { cmd: 'chords.selectInsideRight', args: ["'", "'"] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'yi`': [
    'chords.saveSelections',
    { cmd: 'chords.selectInsideRight', args: ['`', '`'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'yi(': [
    'chords.saveSelections',
    { cmd: 'chords.selectInsideLeft', args: ['(', ')'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'yi{': [
    'chords.saveSelections',
    { cmd: 'chords.selectInsideLeft', args: ['{', '}'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'yi[': [
    'chords.saveSelections',
    { cmd: 'chords.selectInsideLeft', args: ['[', ']'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'yi<': [
    'chords.saveSelections',
    { cmd: 'chords.selectInsideLeft', args: ['<', '>'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'yi)': [
    'chords.saveSelections',
    { cmd: 'chords.selectInsideRight', args: ['(', ')'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'yi}': [
    'chords.saveSelections',
    { cmd: 'chords.selectInsideRight', args: ['{', '}'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'yi]': [
    'chords.saveSelections',
    { cmd: 'chords.selectInsideRight', args: ['[', ']'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  'yi>': [
    'chords.saveSelections',
    { cmd: 'chords.selectInsideRight', args: ['<', '>'] },
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  yit: [
    'chords.saveSelections',
    'chords.selectInsideXMLTag',
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.restoreSelections',
  ],
  // registers -> cut
  xL: ['cursorEndSelect', 'editor.action.clipboardCutAction'],
  x$: ['cursorEndSelect', 'editor.action.clipboardCutAction'],
  xH: ['cursorHomeSelect', 'editor.action.clipboardCutAction'],
  'x^': ['cursorHomeSelect', 'editor.action.clipboardCutAction'],
  xs: ['chords.selectSymbolAtCursor', 'editor.action.clipboardCutAction'],
  xx: [
    'cursorLineStart',
    'cursorLineEndSelect',
    'editor.action.clipboardCutAction',
  ],
  xf: ['chords.cursorToCharRightSelect', 'editor.action.clipboardCutAction'],
  xF: ['chords.cursorToCharLeftSelect', 'editor.action.clipboardCutAction'],
  'x/': ['chords.cursorToMatchRightSelect', 'editor.action.clipboardCutAction'],
  'x\\': ['chords.cursorToMatchLeftSelect', 'editor.action.clipboardCutAction'],
  xaw: ['chords.selectAroundWord', 'editor.action.clipboardCutAction'],
  xab: ['editor.action.selectToBracket', 'editor.action.clipboardCutAction'],
  'xa"': [
    { cmd: 'chords.selectAroundRight', args: ['"', '"'] },
    'editor.action.clipboardCutAction',
  ],
  "xa'": [
    { cmd: 'chords.selectAroundRight', args: ["'", "'"] },
    'editor.action.clipboardCutAction',
  ],
  'xa`': [
    { cmd: 'chords.selectAroundRight', args: ['`', '`'] },
    'editor.action.clipboardCutAction',
  ],
  'xa(': [
    { cmd: 'chords.selectAroundLeft', args: ['(', ')'] },
    'editor.action.clipboardCutAction',
  ],
  'xa{': [
    { cmd: 'chords.selectAroundLeft', args: ['{', '}'] },
    'editor.action.clipboardCutAction',
  ],
  'xa[': [
    { cmd: 'chords.selectAroundLeft', args: ['[', ']'] },
    'editor.action.clipboardCutAction',
  ],
  'xa<': [
    { cmd: 'chords.selectAroundLeft', args: ['<', '>'] },
    'editor.action.clipboardCutAction',
  ],
  'xa)': [
    { cmd: 'chords.selectAroundRight', args: ['(', ')'] },
    'editor.action.clipboardCutAction',
  ],
  'xa}': [
    { cmd: 'chords.selectAroundRight', args: ['{', '}'] },
    'editor.action.clipboardCutAction',
  ],
  'xa]': [
    { cmd: 'chords.selectAroundRight', args: ['[', ']'] },
    'editor.action.clipboardCutAction',
  ],
  'xa>': [
    { cmd: 'chords.selectAroundRight', args: ['<', '>'] },
    'editor.action.clipboardCutAction',
  ],
  xat: ['chords.selectAroundXMLTag', 'editor.action.clipboardCutAction'],
  xiw: ['chords.selectInsideWord', 'editor.action.clipboardCutAction'],
  xib: [
    'editor.action.selectToBracket',
    'chords.shrinkSelections',
    'editor.action.clipboardCutAction',
  ],
  'xi"': [
    { cmd: 'chords.selectInsideRight', args: ['"', '"'] },
    'editor.action.clipboardCutAction',
  ],
  "xi'": [
    { cmd: 'chords.selectInsideRight', args: ["'", "'"] },
    'editor.action.clipboardCutAction',
  ],
  'xi`': [
    { cmd: 'chords.selectInsideRight', args: ['`', '`'] },
    'editor.action.clipboardCutAction',
  ],
  'xi(': [
    { cmd: 'chords.selectInsideLeft', args: ['(', ')'] },
    'editor.action.clipboardCutAction',
  ],
  'xi{': [
    { cmd: 'chords.selectInsideLeft', args: ['{', '}'] },
    'editor.action.clipboardCutAction',
  ],
  'xi[': [
    { cmd: 'chords.selectInsideLeft', args: ['[', ']'] },
    'editor.action.clipboardCutAction',
  ],
  'xi<': [
    { cmd: 'chords.selectInsideLeft', args: ['<', '>'] },
    'editor.action.clipboardCutAction',
  ],
  'xi)': [
    { cmd: 'chords.selectInsideRight', args: ['(', ')'] },
    'editor.action.clipboardCutAction',
  ],
  'xi}': [
    { cmd: 'chords.selectInsideRight', args: ['{', '}'] },
    'editor.action.clipboardCutAction',
  ],
  'xi]': [
    { cmd: 'chords.selectInsideRight', args: ['[', ']'] },
    'editor.action.clipboardCutAction',
  ],
  'xi>': [
    { cmd: 'chords.selectInsideRight', args: ['<', '>'] },
    'editor.action.clipboardCutAction',
  ],
  xit: ['chords.selectInsideXMLTag', 'editor.action.clipboardCutAction'],
  // deletions
  '<backspace>': ['deleteRight', 'chords.setInsertMode'],
  '<delete>': ['deleteRight'], // todo: what should be the behavior in visual mode for delete/backspace keys?
  dL: ['cursorEndSelect', 'deleteLeft'],
  d$: ['cursorEndSelect', 'deleteLeft'],
  dH: ['cursorHomeSelect', 'deleteLeft'],
  'd^': ['cursorHomeSelect', 'deleteLeft'],
  ds: ['chords.selectSymbolAtCursor', 'deleteLeft'],
  dd: 'editor.action.deleteLines',
  df: ['chords.cursorToCharRightSelect', 'deleteLeft'],
  dF: ['chords.cursorToCharLeftSelect', 'deleteLeft'],
  'd/': ['chords.cursorToMatchRightSelect', 'deleteLeft'],
  'd\\': ['chords.cursorToMatchLeftSelect', 'deleteLeft'],
  dw: ['chords.cursorToWordStartRightSelect', 'deleteLeft'],
  db: ['chords.cursorToWordStartLeftSelect', 'deleteLeft'],
  de: ['chords.cursorToWordEndRightSelect', 'deleteLeft'],
  dge: ['chords.cursorToWordEndLeftSelect', 'deleteLeft'],
  daw: ['chords.selectAroundWord', 'deleteLeft'],
  dab: ['editor.action.selectToBracket', 'deleteLeft'],
  'da"': [{ cmd: 'chords.selectAroundRight', args: ['"', '"'] }, 'deleteLeft'],
  "da'": [{ cmd: 'chords.selectAroundRight', args: ["'", "'"] }, 'deleteLeft'],
  'da`': [{ cmd: 'chords.selectAroundRight', args: ['`', '`'] }, 'deleteLeft'],
  'da(': [{ cmd: 'chords.selectAroundLeft', args: ['(', ')'] }, 'deleteLeft'],
  'da{': [{ cmd: 'chords.selectAroundLeft', args: ['{', '}'] }, 'deleteLeft'],
  'da[': [{ cmd: 'chords.selectAroundLeft', args: ['[', ']'] }, 'deleteLeft'],
  'da<': [{ cmd: 'chords.selectAroundLeft', args: ['<', '>'] }, 'deleteLeft'],
  'da)': [{ cmd: 'chords.selectAroundRight', args: ['(', ')'] }, 'deleteLeft'],
  'da}': [{ cmd: 'chords.selectAroundRight', args: ['{', '}'] }, 'deleteLeft'],
  'da]': [{ cmd: 'chords.selectAroundRight', args: ['[', ']'] }, 'deleteLeft'],
  'da>': [{ cmd: 'chords.selectAroundRight', args: ['<', '>'] }, 'deleteLeft'],
  dat: ['chords.selectAroundXMLTag', 'deleteLeft'],
  diw: ['chords.selectInsideWord', 'deleteLeft'],
  dib: [
    'editor.action.selectToBracket',
    'chords.shrinkSelections',
    'deleteLeft',
  ],
  'di"': [{ cmd: 'chords.selectInsideRight', args: ['"', '"'] }, 'deleteLeft'],
  "di'": [{ cmd: 'chords.selectInsideRight', args: ["'", "'"] }, 'deleteLeft'],
  'di`': [{ cmd: 'chords.selectInsideRight', args: ['`', '`'] }, 'deleteLeft'],
  'di(': [{ cmd: 'chords.selectInsideLeft', args: ['(', ')'] }, 'deleteLeft'],
  'di{': [{ cmd: 'chords.selectInsideLeft', args: ['{', '}'] }, 'deleteLeft'],
  'di[': [{ cmd: 'chords.selectInsideLeft', args: ['[', ']'] }, 'deleteLeft'],
  'di<': [{ cmd: 'chords.selectInsideLeft', args: ['<', '>'] }, 'deleteLeft'],
  'di)': [{ cmd: 'chords.selectInsideRight', args: ['(', ')'] }, 'deleteLeft'],
  'di}': [{ cmd: 'chords.selectInsideRight', args: ['{', '}'] }, 'deleteLeft'],
  'di]': [{ cmd: 'chords.selectInsideRight', args: ['[', ']'] }, 'deleteLeft'],
  'di>': [{ cmd: 'chords.selectInsideRight', args: ['<', '>'] }, 'deleteLeft'],
  dit: ['chords.selectInsideXMLTag', 'deleteLeft'],
  // changes
  cL: ['cursorEndSelect', 'deleteLeft', 'chords.setInsertMode'],
  c$: ['cursorEndSelect', 'deleteLeft', 'chords.setInsertMode'],
  cH: ['cursorHomeSelect', 'deleteLeft', 'chords.setInsertMode'],
  'c^': ['cursorHomeSelect', 'deleteLeft', 'chords.setInsertMode'],
  cs: ['chords.selectSymbolAtCursor', 'deleteLeft', 'chords.setInsertMode'],
  cc: ['cursorHome', 'cursorEndSelect', 'deleteLeft', 'chords.setInsertMode'],
  cf: ['chords.cursorToCharRightSelect', 'deleteLeft', 'chords.setInsertMode'],
  cF: ['chords.cursorToCharLeftSelect', 'deleteLeft', 'chords.setInsertMode'],
  'c/': [
    'chords.cursorToMatchRightSelect',
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'c\\': [
    'chords.cursorToMatchLeftSelect',
    'deleteLeft',
    'chords.setInsertMode',
  ],
  cw: [
    'chords.cursorToWordStartRightSelect',
    'deleteLeft',
    'chords.setInsertMode',
  ],
  cb: [
    'chords.cursorToWordStartLeftSelect',
    'deleteLeft',
    'chords.setInsertMode',
  ],
  ce: [
    'chords.cursorToWordEndRightSelect',
    'deleteLeft',
    'chords.setInsertMode',
  ],
  cge: [
    'chords.cursorToWordEndLeftSelect',
    'deleteLeft',
    'chords.setInsertMode',
  ],
  caw: ['chords.selectAroundWord', 'deleteLeft', 'chords.setInsertMode'],
  cab: ['editor.action.selectToBracket', 'deleteLeft', 'chords.setInsertMode'],
  'ca"': [
    { cmd: 'chords.selectAroundRight', args: ['"', '"'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  "ca'": [
    { cmd: 'chords.selectAroundRight', args: ["'", "'"] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ca`': [
    { cmd: 'chords.selectAroundRight', args: ['`', '`'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ca(': [
    { cmd: 'chords.selectAroundLeft', args: ['(', ')'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ca{': [
    { cmd: 'chords.selectAroundLeft', args: ['{', '}'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ca[': [
    { cmd: 'chords.selectAroundLeft', args: ['[', ']'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ca<': [
    { cmd: 'chords.selectAroundLeft', args: ['<', '>'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ca)': [
    { cmd: 'chords.selectAroundRight', args: ['(', ')'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ca}': [
    { cmd: 'chords.selectAroundRight', args: ['{', '}'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ca]': [
    { cmd: 'chords.selectAroundRight', args: ['[', ']'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ca>': [
    { cmd: 'chords.selectAroundRight', args: ['<', '>'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  cat: ['chords.selectAroundXMLTag', 'deleteLeft', 'chords.setInsertMode'],
  ciw: ['chords.selectInsideWord', 'deleteLeft', 'chords.setInsertMode'],
  cib: [
    'editor.action.selectToBracket',
    'chords.shrinkSelections',
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ci"': [
    { cmd: 'chords.selectInsideRight', args: ['"', '"'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  "ci'": [
    { cmd: 'chords.selectInsideRight', args: ["'", "'"] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ci`': [
    { cmd: 'chords.selectInsideRight', args: ['`', '`'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ci(': [
    { cmd: 'chords.selectInsideLeft', args: ['(', ')'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ci{': [
    { cmd: 'chords.selectInsideLeft', args: ['{', '}'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ci[': [
    { cmd: 'chords.selectInsideLeft', args: ['[', ']'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ci<': [
    { cmd: 'chords.selectInsideLeft', args: ['<', '>'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ci)': [
    { cmd: 'chords.selectInsideRight', args: ['(', ')'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ci}': [
    { cmd: 'chords.selectInsideRight', args: ['{', '}'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ci]': [
    { cmd: 'chords.selectInsideRight', args: ['[', ']'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  'ci>': [
    { cmd: 'chords.selectInsideRight', args: ['<', '>'] },
    'deleteLeft',
    'chords.setInsertMode',
  ],
  cit: ['chords.selectInsideXMLTag', 'deleteLeft', 'chords.setInsertMode'],
  dB: 'editor.action.removeBrackets',
} satisfies ChordMap

const visual = {
  '.': 'chords.repeatLastChord',
  '<space>': 'chords.setLeaderMode',
  n: 'chords.setNormalMode',
  v: 'expandLineSelection',
  // basic movement
  h: 'chords.cursorLeftSelect',
  j: 'chords.cursorDownSelect',
  k: 'chords.cursorUpSelect',
  l: 'chords.cursorRightSelect',
  H: 'cursorHomeSelect',
  J: 'chords.paragraphDownSelect',
  L: 'cursorEndSelect',
  K: 'chords.paragraphUpSelect',
  gg: 'cursorTopSelect',
  G: 'cursorBottomSelect',
  '^': 'cursorHomeSelect',
  $: 'cursorEndSelect',
  w: 'chords.cursorToWordStartRightSelect',
  e: 'chords.cursorToWordEndRightSelect',
  b: 'chords.cursorToWordStartLeftSelect',
  ge: 'chords.cursorToWordEndLeftSelect',
  f: 'chords.cursorToCharRightSelect',
  F: 'chords.cursorToCharLeftSelect',
  '/': 'chords.cursorToMatchRightSelect',
  '\\': 'chords.cursorToMatchLeftSelect',
  '>': 'editor.action.insertCursorBelow',
  '<': 'editor.action.insertCursorAbove',
  m: 'editor.action.addSelectionToNextFindMatch',
  M: 'editor.action.addSelectionToPreviousFindMatch',
  // registers
  u: 'undo',
  U: 'redo',
  p: ['editor.action.clipboardPasteAction', 'chords.setNormalMode'],
  y: [
    'editor.action.clipboardCopyAction',
    'chords.highlightSelections',
    'chords.setNormalMode',
  ],
  x: ['editor.action.clipboardCutAction', 'chords.setNormalMode'],
  // deletions
  '<backspace>': ['deleteLeft', 'chords.setInsertMode'],
  c: ['deleteLeft', 'chords.setInsertMode'],
  d: 'deleteLeft',
  D: 'deleteRight',
  // selections
  s: 'chords.selectSymbolAtCursor',
  gs: 'editor.action.smartSelect.expand',
  gS: 'editor.action.smartSelect.shrink',
  aw: 'chords.selectAroundWord',
  ab: 'editor.action.selectToBracket',
  'a"': { cmd: 'chords.selectAroundRight', args: ['"', '"'] },
  "a'": { cmd: 'chords.selectAroundRight', args: ["'", "'"] },
  'a`': { cmd: 'chords.selectAroundRight', args: ['`', '`'] },
  'a(': { cmd: 'chords.selectAroundLeft', args: ['(', ')'] },
  'a{': { cmd: 'chords.selectAroundLeft', args: ['{', '}'] },
  'a[': { cmd: 'chords.selectAroundLeft', args: ['[', ']'] },
  'a<': { cmd: 'chords.selectAroundLeft', args: ['<', '>'] },
  'a)': { cmd: 'chords.selectAroundRight', args: ['(', ')'] },
  'a}': { cmd: 'chords.selectAroundRight', args: ['{', '}'] },
  'a]': { cmd: 'chords.selectAroundRight', args: ['[', ']'] },
  'a>': { cmd: 'chords.selectAroundRight', args: ['<', '>'] },
  at: 'chords.selectAroundXMLTag',
  iw: 'chords.selectInsideWord',
  ib: ['editor.action.selectToBracket', 'chords.shrinkSelections'],
  'i"': { cmd: 'chords.selectInsideRight', args: ['"', '"'] },
  "i'": { cmd: 'chords.selectInsideRight', args: ["'", "'"] },
  'i`': { cmd: 'chords.selectInsideRight', args: ['`', '`'] },
  'i(': { cmd: 'chords.selectInsideLeft', args: ['(', ')'] },
  'i{': { cmd: 'chords.selectInsideLeft', args: ['{', '}'] },
  'i[': { cmd: 'chords.selectInsideLeft', args: ['[', ']'] },
  'i<': { cmd: 'chords.selectInsideLeft', args: ['<', '>'] },
  'i)': { cmd: 'chords.selectInsideRight', args: ['(', ')'] },
  'i}': { cmd: 'chords.selectInsideRight', args: ['{', '}'] },
  'i]': { cmd: 'chords.selectInsideRight', args: ['[', ']'] },
  'i>': { cmd: 'chords.selectInsideRight', args: ['<', '>'] },
  it: 'chords.selectInsideXMLTag',
} satisfies ChordMap

const leader = {
  i: 'chords.setInsertMode',
  k: 'editor.action.showHover',
  h: 'workbench.action.focusLeftGroup',
  l: 'workbench.action.focusRightGroup',
  L: 'workbench.action.moveEditorToNextGroup',
  H: 'workbench.action.moveEditorToPreviousGroup',
  n: 'workbench.action.nextEditor',
  b: 'workbench.action.previousEditor',
  gl: 'workbench.action.gotoLine',
  gd: 'editor.action.revealDefinition',
  gr: 'editor.action.goToReferences',
  gs: 'workbench.action.gotoSymbol',
  gp: 'editor.action.marker.next',
  gP: 'editor.action.marker.prev',
  pd: 'editor.action.peekDefinition',
  '<enter>': 'togglePeekWidgetFocus',
  r: 'editor.action.rename',
  tcu: 'editor.action.transformToUppercase',
  tcl: 'editor.action.transformToLowercase',
  tck: 'editor.action.transformToKebabcase',
  tcc: 'editor.action.transformToCamelcase',
  tcs: 'editor.action.transformToSnakecase',
  tcp: 'editor.action.transformToPascalcase',
  tct: 'editor.action.transformToTitlecase',
  m: 'editor.emmet.action.evaluateMathExpression',
} satisfies ChordMap

export const defaultChords = {
  normal,
  visual,
  leader,
  insert: {},
} as const satisfies Record<Mode, ChordMap>
